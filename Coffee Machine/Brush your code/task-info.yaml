type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    remaining = [400, 540, 120, 9]  # ml, ml, g, cups
    resources = ["water", "milk", "coffee beans", "cups"]
    money = 550  # $
    espresso = [250, 0, 16, 1]
    latte = [350, 75, 20, 1]
    cappuccino = [200, 100, 12, 1]
    price_one_cup = [4, 7, 6]  # espresso, latte, cappuccino


    def state_print():
        print("\nThe coffee machine has:")
        print(remaining[0], "of water")
        print(remaining[1], "of milk")
        print(remaining[2], "of coffee beans")
        print(remaining[3], "of disposable cups")
        print("$", money, " of money", sep="")


    def ask_action():
        while True:
            action = input("\nWrite action (buy, fill, take, remaining, exit):\n> ")

            if action == "buy":
                buy_action()
            elif action == "fill":
                fill_action()
            elif action == "take":
                take_action()
            elif action == "remaining":
                state_print()
            elif action == "exit":
                break


    def buy_action():
        global remaining, espresso, latte, cappuccino, money
        coffee_type = input("\nWhat do you want to buy? "
                            "1 - espresso, "
                            "2 - latte, "
                            "3 - cappuccino, "
                            "back - to main menu:\n> ")

        if coffee_type.isalpha():
            return

        if int(coffee_type) == 1:
            if is_enough(espresso):
                remaining = [remaining[indx] - espresso[indx] for indx in range(4)]
                money += price_one_cup[0]
        elif int(coffee_type) == 2:
            if is_enough(latte):
                remaining = [remaining[indx] - latte[indx] for indx in range(4)]
                money += price_one_cup[1]
        elif int(coffee_type) == 3:
            if is_enough(cappuccino):
                remaining = [remaining[indx] - cappuccino[indx] for indx in range(4)]
                money += price_one_cup[2]


    def is_enough(needed):
        global remaining, resources
        remaining_check = [remaining[indx] >= needed[indx] for indx in range(4)]
        if all(remaining_check):
            print("I have enough resources, making you a coffee!")
            return True
        indx = remaining_check.index(False)
        print("Sorry, not enough ", resources[indx], "!", sep="")


    def fill_action():
        global remaining
        remaining[0] += int(input("\nWrite how many ml of water do you want to add:\n> "))
        remaining[1] += int(input("Write how many ml of milk do you want to add:\n> "))
        remaining[2] += int(input("Write how many grams of coffee beans do you want to add:\n> "))
        remaining[3] += int(input("Write how many disposable cups do you want to add:\n> "))


    def take_action():
        global money
        print("I gave you $", money, sep="")
        money = 0


    ask_action()
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: -1
